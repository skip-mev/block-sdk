// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	blocksdktypes "github.com/skip-mev/block-sdk/x/blocksdk/types"

	types "github.com/cosmos/cosmos-sdk/types"
)

// LaneFetcher is an autogenerated mock type for the LaneFetcher type
type LaneFetcher struct {
	mock.Mock
}

// GetLane provides a mock function with given fields: ctx, id
func (_m *LaneFetcher) GetLane(ctx types.Context, id string) (blocksdktypes.Lane, error) {
	ret := _m.Called(ctx, id)

	var r0 blocksdktypes.Lane
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Context, string) (blocksdktypes.Lane, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(types.Context, string) blocksdktypes.Lane); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(blocksdktypes.Lane)
	}

	if rf, ok := ret.Get(1).(func(types.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLanes provides a mock function with given fields: ctx
func (_m *LaneFetcher) GetLanes(ctx types.Context) []blocksdktypes.Lane {
	ret := _m.Called(ctx)

	var r0 []blocksdktypes.Lane
	if rf, ok := ret.Get(0).(func(types.Context) []blocksdktypes.Lane); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]blocksdktypes.Lane)
		}
	}

	return r0
}

// NewLaneFetcher creates a new instance of LaneFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLaneFetcher(t interface {
	mock.TestingT
	Cleanup(func())
},
) *LaneFetcher {
	mock := &LaneFetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
