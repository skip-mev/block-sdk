// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mempool "github.com/cosmos/cosmos-sdk/types/mempool"
	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/types"
)

// LaneMempool is an autogenerated mock type for the LaneMempool type
type LaneMempool struct {
	mock.Mock
}

// Compare provides a mock function with given fields: ctx, this, other
func (_m *LaneMempool) Compare(ctx types.Context, this types.Tx, other types.Tx) int {
	ret := _m.Called(ctx, this, other)

	var r0 int
	if rf, ok := ret.Get(0).(func(types.Context, types.Tx, types.Tx) int); ok {
		r0 = rf(ctx, this, other)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Contains provides a mock function with given fields: tx
func (_m *LaneMempool) Contains(tx types.Tx) bool {
	ret := _m.Called(tx)

	var r0 bool
	if rf, ok := ret.Get(0).(func(types.Tx) bool); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CountTx provides a mock function with given fields:
func (_m *LaneMempool) CountTx() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Insert provides a mock function with given fields: _a0, _a1
func (_m *LaneMempool) Insert(_a0 context.Context, _a1 types.Tx) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.Tx) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Remove provides a mock function with given fields: _a0
func (_m *LaneMempool) Remove(_a0 types.Tx) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Tx) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Select provides a mock function with given fields: _a0, _a1
func (_m *LaneMempool) Select(_a0 context.Context, _a1 [][]byte) mempool.Iterator {
	ret := _m.Called(_a0, _a1)

	var r0 mempool.Iterator
	if rf, ok := ret.Get(0).(func(context.Context, [][]byte) mempool.Iterator); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mempool.Iterator)
		}
	}

	return r0
}

// NewLaneMempool creates a new instance of LaneMempool. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLaneMempool(t interface {
	mock.TestingT
	Cleanup(func())
}) *LaneMempool {
	mock := &LaneMempool{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
